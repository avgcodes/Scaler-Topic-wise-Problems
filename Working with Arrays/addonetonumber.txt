//---------------    C++  --------------------------

vector<int> Solution::plusOne(vector<int> &A) 
{
    int size = A.size(), i, count=0;
        // if (!size) return A;
        for(i = size-1;i>=0;--i)
        {
            if (A[i]+1 >9)
            {
                A[i] = A[i] + 1 - 10;
                if(i==0)
                {
                    A.insert(A.begin(),1);
                }
            }
            else{
                A[i] = A[i] + 1;
                break;
            }
        }
    
        for(int i=0; i<A.size(); i++)
        {
            if(A[i] != 0 )
            {
                break;
            }
            else
            {
                count++;
            }
        }
        A.erase (A.begin(),A.begin()+count);
        return A;
}



//---------------    Java  --------------------------

public class Solution {
	public ArrayList<Integer> plusOne(ArrayList<Integer> A) {
	    
	    int size;
	    int carry = 1;
	    int num;
	    
	    size = A.size();
	    
	    for (int i = size - 1; i >= 0; i--) {
	        
	        num = A.get(i);
	        num += carry;
	        carry = 0;
	        
	        if (num == 10) {
	            num = 0;
	            carry = 1;
	        }
	        
	        A.set(i, num);
	        
	    }
	    
	    ArrayList<Integer> res = new ArrayList<Integer>();
	    
	    if (carry == 1)
	        res.add(1);
	    
	    for (int x : A) {
	        if (x == 0 && res.size() == 0)
	            continue;
	        res.add(x);
	    }
	    
	    return res;
	    
	}
}


//---------------    Python  --------------------------

class Solution:
    # @param A : list of integers
    # @return a list of integers
    def plusOne(self, A):
        A[-1] += 1
        temp = 0
        tempSum = 0
        for i in range(len(A)-1,-1,-1):
    	    tempSum = A[i]+temp
    	    temp = (A[i]+temp)/10
    	    A[i] = tempSum%10
        if temp > 0:
    	    A = [temp] + A
        i = 0
        while i < len(A):
            if A[i] > 0:
                break
            i += 1
        return A[i:]

//---------------    Javascript  --------------------------

module.exports = { 
    //param a : array of integers
    //return a list of integers
	plusOne : function(a){
	    var b = [];
	    //console.log( 'aaa ', a );
	    a.forEach( function( i ) { if( i ) b.push( i ); } );
	    
	    var i = a.length;
	    var carry = 1;
	    while( --i >= 0 ) {
	       var prev = +a[i];
	       b[i] = +a[i]+carry;
	       b[i] = b[i]%10;
	       if( b[i] < prev )
	        carry = 1;
	       else carry = 0;
	    }
	    
	    if( carry )
	        b.unshift( 1 );
	    while( b[0] === 0 ) b.shift();
	    
	    //console.log( 'hhhh ', a, b );
	    return b;
	}
};


//---------------    Go  --------------------------

func reverse(A []int) ([]int){
    var temp []int
    for i := len(A) - 1;i >= 0; i-- {
        temp = append(temp, A[i])
    } 
    return temp
}
func plusOne(A []int )  ([]int) {
    A = reverse(A)
    var ans []int
    carry := 1
    for i := 0; i < len(A); i++ {
        sum := A[i] + carry
        ans = append(ans, sum % 10)
        carry = sum / 10
    }
    for carry>0 {
        ans = append(ans, carry % 10)
        carry /= 10
    }
    for (ans[len(ans) - 1] == 0 && len(ans) > 1) {
        ans = ans[:len(ans) - 1]
    }
    ans = reverse(ans)
    return ans

//---------------    C#  --------------------------

class Solution {
    public List<int> plusOne(List<int> A) {
        int size = A.Count;
	    int carry = 1;
	    int num = 0;
	    
	    for (int i = size - 1; i >= 0; i--) {
	        num = A[i];
	        num += carry;
	        carry = 0;
	        if (num == 10) {
	            num = 0;
	            carry = 1;
	        }
	        A[i] = num;
	    }
	    
	    List<int> res = new List<int>();
	    if (carry == 1)
	        res.Add(1);
	    for (int i = 0; i < size ; i++) {
	        if (A[i] == 0 && res.Count() == 0)
	            continue;
	        res.Add(A[i]);
	    }
	    return res;
    }
}
